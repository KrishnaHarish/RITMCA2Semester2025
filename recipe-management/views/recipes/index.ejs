<div class="row">
    <!-- Search and Filters -->
    <div class="col-12 mb-4">
        <div class="card">
            <div class="card-body">
                <div class="row align-items-center">
                    <div class="col-md-6 mb-3 mb-md-0">
                        <div class="input-group">
                            <input type="search" class="form-control" id="searchInput" placeholder="Search recipes...">
                            <button class="btn btn-primary" type="button" onclick="searchRecipes()">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="row">
                            <div class="col-md-4">
                                <select class="form-select" id="categoryFilter">
                                    <option value="">All Categories</option>
                                    <option value="appetizer">Appetizer</option>
                                    <option value="main">Main Course</option>
                                    <option value="dessert">Dessert</option>
                                    <option value="beverage">Beverage</option>
                                    <option value="salad">Salad</option>
                                    <option value="soup">Soup</option>
                                    <option value="snack">Snack</option>
                                    <option value="breakfast">Breakfast</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" id="difficultyFilter">
                                    <option value="">All Difficulties</option>
                                    <option value="easy">Easy</option>
                                    <option value="medium">Medium</option>
                                    <option value="hard">Hard</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <select class="form-select" id="sortFilter">
                                    <option value="createdAt,desc">Newest First</option>
                                    <option value="createdAt,asc">Oldest First</option>
                                    <option value="title,asc">Title A-Z</option>
                                    <option value="title,desc">Title Z-A</option>
                                    <option value="favoriteCount,desc">Most Popular</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recipes Grid -->
    <div class="col-12">
        <div id="recipesContainer" class="row">
            <!-- Recipes will be loaded here -->
            <div class="col-12 text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading recipes...</p>
            </div>
        </div>

        <!-- Pagination -->
        <nav aria-label="Recipe pagination" class="mt-4">
            <ul class="pagination justify-content-center" id="paginationContainer">
                <!-- Pagination will be generated here -->
            </ul>
        </nav>
    </div>
</div>

<script>
let currentPage = 1;
let currentFilters = {
    search: '',
    category: '',
    difficulty: '',
    sortBy: 'createdAt',
    sortOrder: 'desc'
};

document.addEventListener('DOMContentLoaded', function() {
    loadRecipes();
    setupEventListeners();
});

function setupEventListeners() {
    // Search input
    document.getElementById('searchInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            searchRecipes();
        }
    });

    // Filter changes
    ['categoryFilter', 'difficultyFilter', 'sortFilter'].forEach(id => {
        document.getElementById(id).addEventListener('change', function() {
            currentPage = 1;
            updateFilters();
            loadRecipes();
        });
    });
}

function searchRecipes() {
    currentPage = 1;
    updateFilters();
    loadRecipes();
}

function updateFilters() {
    currentFilters.search = document.getElementById('searchInput').value;
    currentFilters.category = document.getElementById('categoryFilter').value;
    currentFilters.difficulty = document.getElementById('difficultyFilter').value;
    
    const sortValue = document.getElementById('sortFilter').value.split(',');
    currentFilters.sortBy = sortValue[0];
    currentFilters.sortOrder = sortValue[1];
}

async function loadRecipes() {
    try {
        const params = new URLSearchParams({
            page: currentPage,
            limit: 12,
            ...currentFilters
        });

        // Remove empty values
        for (const [key, value] of params.entries()) {
            if (!value) {
                params.delete(key);
            }
        }

        const response = await axios.get(`/api/recipes?${params.toString()}`);
        const { recipes, pagination } = response.data.data;

        displayRecipes(recipes);
        displayPagination(pagination);

    } catch (error) {
        console.error('Error loading recipes:', error);
        document.getElementById('recipesContainer').innerHTML = `
            <div class="col-12 text-center py-5">
                <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                <h4>Error Loading Recipes</h4>
                <p class="text-muted">Please try again later</p>
                <button class="btn btn-primary" onclick="loadRecipes()">Retry</button>
            </div>
        `;
    }
}

function displayRecipes(recipes) {
    const container = document.getElementById('recipesContainer');
    
    if (recipes.length === 0) {
        container.innerHTML = `
            <div class="col-12 text-center py-5">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h4>No Recipes Found</h4>
                <p class="text-muted">Try adjusting your search criteria</p>
            </div>
        `;
        return;
    }

    container.innerHTML = recipes.map(recipe => `
        <div class="col-lg-4 col-md-6 mb-4">
            <div class="card h-100 recipe-card shadow-sm">
                ${recipe.imageUrl ? `
                    <img src="${recipe.imageUrl}" class="card-img-top" alt="${recipe.title}">
                ` : `
                    <div class="card-img-top recipe-placeholder d-flex align-items-center justify-content-center">
                        <i class="fas fa-utensils fa-3x text-muted"></i>
                    </div>
                `}
                <div class="card-body">
                    <h5 class="card-title">${recipe.title}</h5>
                    <p class="card-text text-truncate-2">${recipe.description}</p>
                    
                    <div class="recipe-meta mb-2">
                        <small class="text-muted">
                            <i class="fas fa-user me-1"></i> ${recipe.author.username}
                        </small>
                        <small class="text-muted ms-3">
                            <i class="fas fa-clock me-1"></i> ${formatDuration(recipe.prepTime + recipe.cookTime)}
                        </small>
                    </div>
                    
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <span class="badge category-badge me-1">${recipe.category}</span>
                            <span class="badge difficulty-${recipe.difficulty}">${recipe.difficulty}</span>
                        </div>
                        <small class="text-muted">
                            <i class="fas fa-heart me-1"></i> ${recipe.favoriteCount}
                        </small>
                    </div>
                </div>
                <div class="card-footer bg-transparent">
                    <div class="d-flex justify-content-between">
                        <a href="/recipes/${recipe._id}" class="btn btn-outline-primary btn-sm">
                            <i class="fas fa-eye me-1"></i> View Recipe
                        </a>
                        ${app.currentUser ? `
                            <button class="btn btn-outline-danger btn-sm" onclick="toggleFavorite('${recipe._id}')">
                                <i class="far fa-heart"></i>
                            </button>
                        ` : ''}
                    </div>
                </div>
            </div>
        </div>
    `).join('');
}

function displayPagination(pagination) {
    const container = document.getElementById('paginationContainer');
    
    if (pagination.pages <= 1) {
        container.innerHTML = '';
        return;
    }

    let paginationHTML = '';
    
    // Previous button
    if (pagination.page > 1) {
        paginationHTML += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="changePage(${pagination.page - 1})">Previous</a>
            </li>
        `;
    }

    // Page numbers
    const startPage = Math.max(1, pagination.page - 2);
    const endPage = Math.min(pagination.pages, pagination.page + 2);

    if (startPage > 1) {
        paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(1)">1</a></li>`;
        if (startPage > 2) {
            paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
    }

    for (let i = startPage; i <= endPage; i++) {
        paginationHTML += `
            <li class="page-item ${i === pagination.page ? 'active' : ''}">
                <a class="page-link" href="#" onclick="changePage(${i})">${i}</a>
            </li>
        `;
    }

    if (endPage < pagination.pages) {
        if (endPage < pagination.pages - 1) {
            paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
        paginationHTML += `<li class="page-item"><a class="page-link" href="#" onclick="changePage(${pagination.pages})">${pagination.pages}</a></li>`;
    }

    // Next button
    if (pagination.page < pagination.pages) {
        paginationHTML += `
            <li class="page-item">
                <a class="page-link" href="#" onclick="changePage(${pagination.page + 1})">Next</a>
            </li>
        `;
    }

    container.innerHTML = paginationHTML;
}

function changePage(page) {
    currentPage = page;
    loadRecipes();
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

function formatDuration(minutes) {
    if (!minutes) return 'N/A';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0 && mins > 0) {
        return `${hours}h ${mins}m`;
    } else if (hours > 0) {
        return `${hours}h`;
    } else {
        return `${mins}m`;
    }
}

async function toggleFavorite(recipeId) {
    if (!app.currentUser) {
        app.showAlert('Please log in to favorite recipes', 'warning');
        return;
    }

    try {
        // This would implement the favorite toggle functionality
        app.showAlert('Favorite feature coming soon!', 'info');
    } catch (error) {
        app.showAlert('Error updating favorite', 'danger');
    }
}
</script>